scalar DateTime
scalar Quantity
scalar Symbol

enum ExchangeEnum {
  RADAR_RELAY
  OASIS_DEX
  ERC_DEX
}

type Fund {
  rank: Int
  address: String!
  name: String!
  sharePrice: Float!
  inception: String!
  gav: Float!
  nav: Float!
  owner: String
  totalSupply: Float
  modules: [String]
  managementReward: Float
  performanceReward: Float
  unclaimedRewards: Float
  rewardsShareQuantity: Float
  subscriptionAllowed: Boolean
  redemptionAllowed: Boolean
  holdings: [Holding]
}

type Holding {
  symbol: String!
  balance: String!
  price: String!
  fraction: String!
}

type HowMuchOfAsset {
  symbol: Symbol!
  howMuch: String!
}

interface Order {
  maker: String!
  taker: String
  isActive: Boolean!
  type: String!
  buy: HowMuchOfAsset!
  sell: HowMuchOfAsset!
  price: String!
  exchangeContractAddress: String
  exchange: String
}

type Trade {
  price: String
  quantity: String
  timestamp: String
  type: String
}

type ZeroExOrder implements Order {
  maker: String!
  taker: String
  isActive: Boolean!
  type: String!
  buy: HowMuchOfAsset!
  sell: HowMuchOfAsset!
  price: String!
  exchangeContractAddress: String
  exchange: String
  expiration: String
  salt: String!
  makerFee: String!
  takerFee: String!
  signature: Signature
  feeRecipient: String
  timestamp: DateTime
}

type OasisDexOrder implements Order {
  maker: String!
  taker: String
  isActive: Boolean!
  type: String!
  buy: HowMuchOfAsset!
  sell: HowMuchOfAsset!
  price: String!
  exchangeContractAddress: String
  exchange: String
  id: String!
  timestamp: DateTime
}

type Orderbook {
  allOrders: [Order]
  sellEntries: [OrderbookEntry]
  buyEntries: [OrderbookEntry]
  totalBuyVolume: Quantity
  totalSellVolume: Quantity
}

type OrderbookEntry {
  volume: Quantity
  order: Order
}

type Price {
  symbol: String!
  price: Quantity
}

type Signature {
  r: String!
  s: String!
  v: Int!
}

type Query {
  openOrders(address: String!): [Order]
  recentTrades(baseTokenSymbol: String!, quoteTokenSymbol: String!): [Trade]
  price(symbol: Symbol!): String
  fund(address: String!): Fund
  funds(addresses: [String]): [Fund]
}

type Subscription {
  orderbook(
    baseTokenSymbol: Symbol!
    quoteTokenSymbol: Symbol!
    exchanges: [ExchangeEnum] = ["RADAR_RELAY", "OASIS_DEX", "ERC_DEX"]
  ): Orderbook
}

schema {
  query: Query
  subscription: Subscription
}
